Bhai ab baat karte hain **Java Interfaces** ki —
jo Java ka ek **superpower feature** hai abstraction aur multiple behavior handle karne ke liye 💪

---

## 🧠 Interface in Java (Hinglish + Deep)

### 🔍 Definition:
> **Interface** ek **blueprint** hai jisme **sirf method signatures** hote hain.
> Unka implementation class mein hota hai.

> Think of it as:
> **"Ek contract — jo class ko follow karna hi padega."**

---

### 🔧 Syntax:

```java
interface Animal {
    void sound(); // no body
}
```

```java
class Dog implements Animal {
    public void sound() {
        System.out.println("Dog barks");
    }
}
```

---

## 🔥 Key Points:

| Feature             | Interface                                               |
|---------------------|----------------------------------------------------------|
| Variables           | Automatically `public static final` (constant)          |
| Methods (Java 8+)   | - abstract (by default)
                     - default methods (with body)
                     - static methods (with body) |
| Multiple inheritance | ✅ Supported using interfaces                           |
| Constructor         | ❌ Not allowed in interface                              |

---

## 🎯 Why Use Interfaces?

- ✅ Multiple behavior define karne ke liye
- ✅ Loose coupling / abstraction
- ✅ Dependency Injection / design flexibility

---

## 📦 Real-World Example:

### ✅ Interface: `PaymentGateway.java`

```java
package com.samad.javacore.interfaceexample;

public interface PaymentGateway {
    void pay(double amount);
}
```

---

### ✅ Class: `Paytm.java`

```java
package com.samad.javacore.interfaceexample;

public class Paytm implements PaymentGateway {
    public void pay(double amount) {
        System.out.println("Paying ₹" + amount + " via Paytm");
    }
}
```

---

### ✅ Class: `PhonePe.java`

```java
package com.samad.javacore.interfaceexample;

public class PhonePe implements PaymentGateway {
    public void pay(double amount) {
        System.out.println("Paying ₹" + amount + " via PhonePe");
    }
}
```

---

### ✅ Main.java

```java
package com.samad.javacore.interfaceexample;

public class Main {
    public static void main(String[] args) {
        PaymentGateway gateway;

        gateway = new Paytm();
        gateway.pay(500);

        gateway = new PhonePe();
        gateway.pay(750);
    }
}
```

---

### ✅ Output:

```
Paying ₹500.0 via Paytm
Paying ₹750.0 via PhonePe
```

---

## 👊 Bonus: Default and Static Methods (Java 8+)

```java
interface MyInterface {
    void show();

    default void greet() {
        System.out.println("Hello from interface");
    }

    static void info() {
        System.out.println("Static method in interface");
    }
}
```

```java
class MyClass implements MyInterface {
    public void show() {
        System.out.println("Show implementation");
    }
}
```

```java
public class Main {
    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.show();
        obj.greet();          // default method
        MyInterface.info();   // static method
    }
}
```

---

## ⚔️ Interface vs Abstract Class

| Feature              | Interface               | Abstract Class             |
|----------------------|--------------------------|-----------------------------|
| Multiple Inheritance | ✅ Yes                   | ❌ No                        |
| Constructors         | ❌ Not allowed            | ✅ Allowed                   |
| Variables            | Always `public static final` | Can have instance vars |
| Methods              | Abstract, default, static | Abstract & concrete         |

---

Next chalayin `abstract class`, `this`, `super`, ya `functional interfaces` pe?
Ya ek example chahiye jisme **interface + inheritance + polymorphism** combined ho? 😎