🔁 What is recursion in Java?
    recursion is a programming technique where a method calls itself to solve a smaller part of the problem until a base condition is met.

✅ Important Points about recursion:
    Base Case is a must – Prevents infinite recursion and stops the function.

    Recursive Case – The part where the function calls itself.

    Stack Memory – Each recursive call uses stack memory. Too many calls can lead to StackOverflowError.

    Used for problems that can be broken into smaller, similar sub-problems (e.g., factorial, Fibonacci, tree traversal, etc.).

    Should be optimized – If not written carefully, recursion can be inefficient.

📌 Syntax (General Pattern):
        returnType methodName(parameters) {
            if (base condition) {
                return some value;
            } else {
                return methodName(modified parameters); // recursive call
            }
        }

💡 Example: Factorial using recursion
        public class RecursionExample {

            // Recursive method to calculate factorial
            static int factorial(int n) {
                if (n == 0 || n == 1) {
                    return 1; // base case
                } else {
                    return n * factorial(n - 1); // recursive case
                }
            }

            public static void main(String[] args) {
                int number = 5;
                int result = factorial(number);
                System.out.println("Factorial of " + number + " is: " + result);
            }
        }

Output:
Factorial of 5 is: 120

⚠️ When to Avoid recursion:
    If performance or memory is a concern (consider iteration instead).
    Deep recursion can lead to stack overflow.


+--------------------------------------------------------------------------------+

🔁 What is Recursion?
    Recursion matlab:
        Ek method/apna function khud ko hi call kare — tab usse recursion kehte hain.

📘 Simple Definition:
    Function calling itself repeatedly until a condition is met (base case).

🧠 Why use Recursion?
    Jab koi problem ka chhota version, usi problem jaisa dikhta ho, tab recursion best hota hai.
    Complex problems ko tod kar easily solve kar sakte ho.

🎯 Structure of Recursive Function:
    +--------------------------------------------------+
        void recursiveMethod() {
                // base case (stop condition)

                // recursive call (function calling itself)
        }
    +--------------------------------------------------+

🔔 Important:
    Base Case must be there, warna infinite recursion ho jaayegi and program crash karega (StackOverflowError).

    +-------------------------------------------------------+
        📌 Example 1: Factorial using Recursion
            5! = 5 * 4 * 3 * 2 * 1 = 120
            int factorial(int n) {
                if (n == 1) return 1;          // base case
                return n * factorial(n - 1);   // recursive call
            }
        🧪 Usage:
            System.out.println(factorial(5)); // Output: 120

        📌 Example 2: Print Numbers in Reverse
            Print numbers from n to 1:
            void printReverse(int n) {
                if (n == 0) return;       // base case
                System.out.println(n);
                printReverse(n - 1);      // recursive call
            }
    +-------------------------------------------------------+

🔥 How Recursion Works (Behind the scenes):
    Let’s say:
    factorial(3)
    ➡️ Call stack banega:

    matlab
    factorial(3)
    = 3 * factorial(2)
               = 2 * factorial(1)
                         = 1 (base case)

    So final answer:
    = 3 * 2 * 1 = 6

🔁 Recursion vs Loop
    Recursion	Loop
    Elegant but memory heavy	Efficient in memory
    Uses function calls	Uses single block
    Better for tree/graph type problems	Better for counting/repeating
    🚨 Common Mistakes
    ❌ Recursive function without base case
    ❌ Mistaken recursive call — wrong condition
    ❌ Forgetting to return value in return-type methods

✅ Homework / Practice
Write a recursive function to calculate sum of first n natural numbers.

Input: 5

Output: 15 (i.e., 5 + 4 + 3 + 2 + 1)

Write a function to print Fibonacci series using recursion.
